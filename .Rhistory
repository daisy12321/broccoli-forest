  wins = 0
ties = 0
loses = 0
  hands = c()
  while(length(deck) >= 20){
    outcome = ''
    #Dealer - draw until over 16, then stop
    d = c()
    while(handvalue(d) <= 16) {
      d = c(d, deck[length(deck)])
      deck = deck[1:length(deck)-1]
    }
# Player - draw two cards
    p = c()
    for(i in 1:2) {
      p = c(p, deck[length(deck)])
      deck = deck[1:length(deck)-1]
    }
# Player - basic strategy
stop = 0
while(stop == 0) {
      if((handvalue(p) <= 11))  {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else if(handvalue(p) == 12 && d[1] %in% c('2', '3', '7', '8', '9', '10', 'J', 'Q', 'K', 'A')) {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else if(handvalue(p) == 14 && length(p) == 2 && p[1] == '7' && p[2] == '7' && d[1] %in% c('10', 'J', 'Q', 'K')) {
stop = 1
}
else if(handvalue(p) == 16 && length(p) > 2 && d[1] %in% c('10', 'J', 'Q', 'K')) {
stop = 1
}
else if((handvalue(p) == 13 | handvalue(p) == 14 | handvalue(p) == 15 | handvalue(p) == 16) && d[1] %in% c('7', '8', '9', '10', 'J', 'Q', 'K', 'A')) {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else if(handvalue(p) == 17 && softhand(p) == 1) {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else if(handvalue(p) == 18 && softhand(p) == 1 && d[1] %in% c('9', '10', 'J', 'Q', 'K')) {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else {
stop = 1
}
}
    #Score
    if(handvalue(p) > 21) {
outcome = 'Player Bust'
} else if(handvalue(d) > 21) {
outcome = 'Dealer Bust'
} else if(handvalue(d) == 21 && length(d) == 2 && handvalue(p) == 21 && length(p) == 2) {
outcome = 'Push'
} else if(handvalue(d) == 21 && length(d) == 2) {
outcome = 'Dealer BlackJack'
} else if(handvalue(p) == 21 && length(p) == 2) {
outcome = 'Player BlackJack'
} else if(handvalue(d) == handvalue(p)) {
outcome = 'Push'
} else if(handvalue(p) > handvalue(d)) {
outcome = 'Player Win'
} else {
outcome = 'Dealer Win'
}
# Keep track of wins
    if(outcome %in% c('Player Win', 'Dealer Bust', 'Player BlackJack')) {
      wins = wins + 1
    } else if(outcome %in% c('Dealer Win', 'Player Bust', 'Dealer BlackJack')) {
      loses = loses + 1
    } else if(outcome == 'Push') {
      ties = ties + 1
    }
 
    hands = rbind(hands, c(paste(d, collapse=" "), handvalue(d), paste(p, collapse=" "), handvalue(p), outcome, wins))
  }
hands = as.data.frame(hands)
  colnames(hands) = c("Dealer", "DealerValue",  "Player", "PlayerValue", "Outcome", "Wins")
print(paste("Won ", hands$Wins[nrow(hands)], "hands"))
print(paste("Played ", nrow(hands), "hands"))
  return(hands)
}
# Other functions needed:
# value function takes in a character and returns a number
value = function(char) {
  if(char == 'A'){return(1)}
  else if(char %in% c('J', 'Q', 'K')){return(10)}
  else{return(as.numeric(char))}
}
# handvalue takes in a list of cards and counts up the value
handvalue = function(lst) {
  val = 0
  if(length(lst) == 0) {return(0)}
  for(l in lst) {val = val + value(l)}
  if('A' %in% lst && val <= 11) {val = val + 10}
  return(val)
}
# softhand returns 1 if the hand is a soft hand
softhand = function(lst) {
  val = 0
soft = 0
  if(length(lst) == 0) {return(0)}
  for(l in lst) {val = val + value(l)}
  if('A' %in% lst && val <= 11) {soft = 1}
  return(soft)
}
Results = PlayBlackjack(Cards)
Results = PlayBlackjack(Cards)
Results = PlayBlackjack(Cards)
Results = PlayBlackjack(Cards)
Results = PlayBlackjack(Cards)
runif(10)
runif(10, -100, 100)
set.seed(88)
runif(10)
# FUNCTIONS TO PLAY BLACKJACK
# We are not betting or keeping track of the count here
# Using basic strategy, but only simple moves (no splitting, doubling down, insurance)
# Run everything below this line to create blackjack functions
PlayBlackjack = function(Cards) {
  
# Use 6 decks to play
NumDecks = 6
# Generate overall deck using "Cards"
lst = Cards
  for(i in 1:(NumDecks*4 - 1)) {
    lst = c(lst, Cards)
  }
# Shuffle Cards
tmp = cbind(lst, runif(length(lst)))
  tmp = tmp[order(tmp[,2]),]
  deck = tmp[,1]
# Initialize number of wins, loses, and ties
  wins = 0
ties = 0
loses = 0
  hands = c()
  while(length(deck) >= 20){
    outcome = ''
    #Dealer - draw until over 16, then stop
    d = c()
    while(handvalue(d) <= 16) {
      d = c(d, deck[length(deck)])
      deck = deck[1:length(deck)-1]
    }
# Player - draw two cards
    p = c()
    for(i in 1:2) {
      p = c(p, deck[length(deck)])
      deck = deck[1:length(deck)-1]
    }
# Player - basic strategy
stop = 0
while(stop == 0) {
      if((handvalue(p) <= 11))  {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else if(handvalue(p) == 12 && d[1] %in% c('2', '3', '7', '8', '9', '10', 'J', 'Q', 'K', 'A')) {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else if(handvalue(p) == 14 && length(p) == 2 && p[1] == '7' && p[2] == '7' && d[1] %in% c('10', 'J', 'Q', 'K')) {
stop = 1
}
else if(handvalue(p) == 16 && length(p) > 2 && d[1] %in% c('10', 'J', 'Q', 'K')) {
stop = 1
}
else if((handvalue(p) == 13 | handvalue(p) == 14 | handvalue(p) == 15 | handvalue(p) == 16) && d[1] %in% c('7', '8', '9', '10', 'J', 'Q', 'K', 'A')) {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else if(handvalue(p) == 17 && softhand(p) == 1) {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else if(handvalue(p) == 18 && softhand(p) == 1 && d[1] %in% c('9', '10', 'J', 'Q', 'K')) {
p = c(p, deck[length(deck)])
        deck = deck[1:length(deck)-1]
}
else {
stop = 1
}
}
    #Score
    if(handvalue(p) > 21) {
outcome = 'Player Bust'
} else if(handvalue(d) > 21) {
outcome = 'Dealer Bust'
} else if(handvalue(d) == 21 && length(d) == 2 && handvalue(p) == 21 && length(p) == 2) {
outcome = 'Push'
} else if(handvalue(d) == 21 && length(d) == 2) {
outcome = 'Dealer BlackJack'
} else if(handvalue(p) == 21 && length(p) == 2) {
outcome = 'Player BlackJack'
} else if(handvalue(d) == handvalue(p)) {
outcome = 'Push'
} else if(handvalue(p) > handvalue(d)) {
outcome = 'Player Win'
} else {
outcome = 'Dealer Win'
}
# Keep track of wins
    if(outcome %in% c('Player Win', 'Dealer Bust', 'Player BlackJack')) {
      wins = wins + 1
    } else if(outcome %in% c('Dealer Win', 'Player Bust', 'Dealer BlackJack')) {
      loses = loses + 1
    } else if(outcome == 'Push') {
      ties = ties + 1
    }
 
    hands = rbind(hands, c(paste(d, collapse=" "), handvalue(d), paste(p, collapse=" "), handvalue(p), outcome, wins))
  }
hands = as.data.frame(hands)
  colnames(hands) = c("Dealer", "DealerValue",  "Player", "PlayerValue", "Outcome", "Wins")
print(paste("Won ", hands$Wins[nrow(hands)], "hands"))
print(paste("Played ", nrow(hands), "hands"))
  return(hands)
}
# Other functions needed:
# value function takes in a character and returns a number
value = function(char) {
  if(char == 'A'){return(1)}
  else if(char %in% c('J', 'Q', 'K')){return(10)}
  else{return(as.numeric(char))}
}
# handvalue takes in a list of cards and counts up the value
handvalue = function(lst) {
  val = 0
  if(length(lst) == 0) {return(0)}
  for(l in lst) {val = val + value(l)}
  if('A' %in% lst && val <= 11) {val = val + 10}
  return(val)
}
# softhand returns 1 if the hand is a soft hand
softhand = function(lst) {
  val = 0
soft = 0
  if(length(lst) == 0) {return(0)}
  for(l in lst) {val = val + value(l)}
  if('A' %in% lst && val <= 11) {soft = 1}
  return(soft)
}
Results = PlayBlackjack(Cards)
24/53
Cards = c("A", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K")
#"2",
Results = PlayBlackjack(Cards)
Results
16/53
Cards = c("A", "7", "8", "9", "10", "J", "Q", "K")
#"2",  "3", "4", "5", "6",
Results = PlayBlackjack(Cards)
18/41
ls
install.packages("extrafont")
library(extrafont)
font_install('fontcm')
dat = read.csv('/Downloads')
dat = read.csv('Downloads')
dat = read.csv('Downloads/table.csv')
head(dat)
P = dat$Close
P = rev(P)
t = dat$Date
plot(P)
plot(P, type='l')
plot(log(P), type='l')
t[1]
rev(t)[1]
spectrum
spectrum(log(P))
plot(log(P), type='l')
sin(3)
x = (1:628)/100.0
plot(x,sin(x))
spectrum(sin(x))
x = (1:10000)/100
spectrum(sin(x))
plot(x,sin(x),type='l')
spectrum(sin(x))
fft
a = fft(sin(x))
plot(a)
head(a)
plot(x,sin(x),type='l')
plot(1/x,fft(x),type='l')
plot(1/x,abs(fft(x))**2,type='l')
plot(x,sin(x),type='l')
plot(1/x,abs(fft(x))**2,type='l')
plot(1/x,log(abs(fft(x))**2),type='l')
plot(x,sin(x),type='l')
plot(1/x,log(abs(fft(x))**2),type='l')
spectrum(sin(x))
plot.frequency.spectrum(sin(x))
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
plot.frequency.spectrum(sin(x))
acf(P)
acf(diff(log(P)))
plot(log(P))
plot(log(P),type='l')
points = read.csv(paste(filename, ".csv", sep=""), header=F)
library(ggplot2)
plotname = paste(filename, ".pdf", sep="")
pdf(plotname, width=8*widthfactor + 4, height=5)
library(ggplot)
x1 = [3, 2]
x2 = [1, 5]
x3 = [6, 6]
x1 = c(3, 2)
x2 = c(1, 5)
x3 = c(6, 6)
data.plot = dataframe(x1, x2, c3)
data.plot = DataFrame(x1, x2, c3)
data.plot = data.frame(x1, x2, c3)
data.plot = data.frame(x1, x2, x3)
transpose(c(x1, x2, x3))
trans(c(x1, x2, x3))
c(x1, x2, x3)
x1 = c(3, 1, 6)
x2 = c(2, 5, 6)
data.plot = data.frame(x1, x2)
ggplot(mtcars, aes(wt, mpg))
library(ggplot)
ggplot(data.plot, aes(x1, x2))+ geom_point()
library(ggplot2)
ggplot(data.plot, aes(x1, x2))+ geom_point()
ggplot(data.plot, aes(x1, x2))+ geom_point(size = 3)
ggplot(data.plot, aes(x1, x2))+ geom_point(size = 8)
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=c(-2,2), linetype="dotted")
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2), linetype="dotted")
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted")
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 6)
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2)
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2, color = "red")
x1 = c(4, 1, 6)
x2 = c(2, 5, 6)
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2, color = "red")
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2, color = "red") +
geom_point(data = (2, 5))
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2, color = "red") +
geom_point(data = (2, 5))
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2, color = "red") +
geom_point((2, 5))
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2, color = "red") +
geom_point(c(2, 5))
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2, color = "red") +
geom_point(aes(2,5))
data.plot = data.frame(x1, x2)
ggplot(data.plot, aes(x1, x2)) +
geom_point(size = 8) +
geom_vline(xintercept=2, linetype="dotted", size = 2, color = "red") +
geom_point(aes(2,5), size = 8, color = "red")
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
install.packages('devtools', repo = 'https://cran.rstudio.com')
library(mxnet)
library(imager)
install.packages("imager")
library(mxnet)
library(imager)
pred.cart = predict(cart.model, newdata=test.census)
setwd("~/Dropbox (MIT)/15.071-2016/Homework-2016/Homework 3-2016")
# Read in data
Census = read.csv("census.csv")
library(caTools)
set.seed(2000)
split = sample.split(Census$over50k, SplitRatio = 0.6)
CensusTrain = subset(Census, split==TRUE)
CensusTest  = subset(Census, split==FALSE)
pred.cart = predict(cart.model, newdata=CensusTest)
cart.model = rpart( over50k ~  .  ,  method="class", data = CensusTrain, cp = 0.002)
pred.cart = predict(cart.model, newdata=CensusTest)
library(rpart)
cart.model = rpart( over50k ~  .  ,  method="class", data = CensusTrain, cp = 0.002)
pred.cart = predict(cart.model, newdata=CensusTest)
r2.cart = 1-sum((pred.cart-CensusTest$over50k)^2)/sum((mean(CensusTest$over50k)-CensusTest$over50k)^2)
CensusTest$over50k
set.seed(1)
train =CensusTrain
trainSmall = train[sample(nrow(train), 2000), ]
set.seed(1)
mod.rf = randomForest(over50k~., data=trainSmall, mtry=5, nodesize=5, ntree=500)
library(randomForest)
mod.rf = randomForest(over50k~., data=trainSmall, mtry=5, nodesize=5, ntree=500)
mod.rf
predict(mod.rf)
pred = predict(mod.rf)
pred
table(pred, trainSmall$over50k)
library(caret)
fitControl = trainControl( method = "cv", number = 10 )
cartGrid = expand.grid( .cp = (1:50)*0.002) # .minbucket = c(1, 2, 3, 5, 10, 15, 20),
censustreeFit = train( over50k ~  . , data = census_train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
censustreeFit$finalModel
library(ggplot2)
setwd("~/Documents/MIT/15.097/broccoli-forest")
recover = read.csv("hw1_output.csv", header = TRUE)
recover
recover = read.csv("hw1_output.csv", header = TRUE)
recover
recover = read.csv("hw1_output.csv", header = TRUE)
recover
library(tidyr)
recover %>% data.frame
recover %>% data.frame %>% rownames()
recover = recover %>% data.frame %>%
recover = read.csv("hw1_output.csv", header = TRUE)
recover = read.csv("hw1_output.csv", header = TRUE)
str(recover)
rownames(recover) = 1:10
recover
colnames(recover) = 1:10
recover
recover = read.csv("hw1_output.csv", header = TRUE)
rownames(recover) = 1:10
colnames(recover) = 1:10
recover %>% gather()
recover
recover %>% mutate(movern = row()/n())
library(dplyr)
recover %>% mutate(movern = row()/n())
row()
recover = read.csv("hw1_output.csv", header = TRUE)
recover
recover = read.csv("hw1_output.csv", header = TRUE)
recover
recover %>% gather(2:11)
recover %>% gather("X", 2:11)
recover %>% gather(koverm, recovered,X1:X10)
recover = read.csv("hw1_output.csv", header = FALSE)
recover
recover = read.csv("hw1_output.csv", header = TRUE)
recover
recover_long = recover %>% gather(koverm, recovered,X1:X10)
recover_long
gsub("[[:punct:]]", "", recover_long)
gsub("[[:punct:]]", "", recover_long$koverm)
gsub("X", "", recover_long$koverm)
recover_long$koverm == as.numeric(gsub("X", "", recover_long$koverm))/10
recover_long$koverm = as.numeric(gsub("X", "", recover_long$koverm))/10
recover_long
head(recover_long)
recover_long %>% ggplot(aes(x=X0, y=koverm, color = recovered) + geom_point()
)
recover_long %>% ggplot(aes(x=X0, y=koverm, color = recovered)) + geom_point()
recover_long %>% ggplot(aes(x=X0, y=koverm, color = recovered)) + geom_point(size=3)
recover_long$recovered = factor(recover_long$recovered)
recover_long %>% ggplot(aes(x=X0, y=koverm, color = recovered)) + geom_point(size=3)
recovered
recover_long %>% ggplot(aes_string(x="m/n", y="k/m", color = "recovered")) + geom_point(size=3)
colnames(recover_long) = c("m/n", "k/m", recovered)
colnames(recover_long) = c("m/n", "k/m", "recovered")
recover_long %>% ggplot(aes_string(x="m/n", y="k/m", color = "recovered")) + geom_point(size=3)
recover_long %>% ggplot(aes_string("m/n", y="k/m", color = "recovered")) + geom_point(size=3)
colnames(recover_long) = c("m over n", "k over m", "recovered")
recover_long %>% ggplot(aes_string("m over n", y="k over m", color = "recovered")) + geom_point(size=3)
colnames(recover_long) = c("m_over_n", "k_over_m", "recovered")
recover_long %>% ggplot(aes_string("m_over_n", y="k_over_m", color = "recovered")) + geom_point(size=3)
ggsave("hw1_output.pdf")
library(tm)
library("tm")
install.packages("tm")
library(tm)
